When building apps with forms, import 'FormsModule' into your appModule file
//instructions on how to do this go here//

Revise the app.module.ts

ts//
import { NgModule }      from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule }   from '@angular/forms';//this is needed for all forms to actually work

import { AppComponent }  from './app.component';
import { HeroFormComponent } from './hero-form/hero-form.component';

@NgModule({
  imports: [
    BrowserModule,
    FormsModule//import the new component
  ],
  declarations: [
    AppComponent,
    HeroFormComponent
  ],
  providers: [],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

//instruction end//

two way binding

ts//

import { Component } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  user = { email:'' };
}


html//

<form (submit)="onSubmit()">
  <input type="text" name="email" [(ngModel)]="user.email">
  <input type="submit">
</form>


submitting the form

ts//

import { Component } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  user = { email:'' };
  users = [];
  onSubmit(){
    this.users.push(this.user);
    this.user = { email:'' };
  }
}


html//

<form (submit)="onSubmit()">
  <input type="text" name="email" [(ngModel)]="user.email">
  <input
  type="submit">
</form>


Validations

html//

<input
  type="text"
  name="email"
  required
  minlength="4"
  maxlength="24"
  [(ngModel)]="user.email"
  #email="ngModel"
>
{{ email.errors | json }}// needs to be .errors else errors may arise
{{ email.valid | json }}//same with .valid

Built in classes for validation

css//

.ng-valid { } # is set if the form control is valid.
.ng-invalid { } # is set if the form control is invalid.
.ng-pristine { } # is set if the form control has not been changed and pristine.
.ng-dirty { } # is set if the form control has been changed and dirty.
.ng-touched { } # is set if the form control has been visited.
.ng-untouched { } # is set if the form control has not been visited.

validation styling

ts//

import { Component } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  user = {
    username: '',
    password: ''
  };
}

css//

import { Component } from '@angular/core';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  user = {
    username: '',
    password: ''
  };
}


html//

<form>
  <input
    type="text"
    name="username"
    [(ngModel)]="user.username"
    #username="ngModel"
    required
  />
  <input
    type="password"
    name="password"
    [(ngModel)]="user.password"
    #password="ngModel"
    required
  />
</form>

registration form example

ts//

in a new class file - users.ts

export class User {
  constructor(
    public id: number = null,
    public first_name: string = "",
    public last_name: string = "",
    public email: string = "",
    public password: string = "",
    public created_at: Date = new Date(),
    public updated_at: Date = new Date()
  ){}
}

in main app.component.ts

import { Component } from '@angular/core';
import { User } from './user';
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  user = new User();
  users = [];
  onSubmit(){
    this.users.push(this.user);
    this.user = new User();
  }
}

html//

<form (submit)="onSubmit()">
  <input
    type="text"
    name="email"
    required
    minlength="4"
    maxlength="24"
    [(ngModel)]="user.email"
    #email='ngModel'
  />
  <input
    type="text"
    name="first_name"
    required
    minlength="4"
    maxlength="24"
    [(ngModel)]="user.first_name"
    #first_name='ngModel'
  />
  <input
    type="text"
    name="last_name"
    required
    minlength="4"
    maxlength="24"
    [(ngModel)]="user.last_name"
    #last_name='ngModel'
  />
  <input
    type="text"
    name="password"
    required
    minlength="10"
    maxlength="24"
    pattern="^([a-zA-Z0-9@*#]{8,15})$"
    [(ngModel)]="user.password"
    #password='ngModel'
  />
  <input type="submit">
</form>


